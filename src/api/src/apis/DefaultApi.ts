/* tslint:disable */
/* eslint-disable */
/**
 * 売上管理システムAPI
 * 売上データとダッシュボード情報を管理するモックAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomerRequest,
  CreateSaleRequest,
  Customer,
  DashboardStats,
  GetCustomers200Response,
  GetRecentSales200Response,
  GetSales200Response,
  GetSalesChart200Response,
  Sale,
} from '../models/index';

export interface CreateCustomerOperationRequest {
    createCustomerRequest: CreateCustomerRequest;
}

export interface CreateSaleOperationRequest {
    createSaleRequest: CreateSaleRequest;
}

export interface GetCustomersRequest {
    limit?: number;
    offset?: number;
    search?: string;
}

export interface GetRecentSalesRequest {
    limit?: number;
}

export interface GetSalesRequest {
    limit?: number;
    offset?: number;
    sortBy?: GetSalesSortByEnum;
    sortOrder?: GetSalesSortOrderEnum;
}

export interface GetSalesChartRequest {
    period?: GetSalesChartPeriodEnum;
    limit?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 新しい顧客データを作成します
     * 顧客データ作成
     */
    async createCustomerRaw(requestParameters: CreateCustomerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters['createCustomerRequest'] == null) {
            throw new runtime.RequiredError(
                'createCustomerRequest',
                'Required parameter "createCustomerRequest" was null or undefined when calling createCustomer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/customers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createCustomerRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 新しい顧客データを作成します
     * 顧客データ作成
     */
    async createCustomer(requestParameters: CreateCustomerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Customer> {
        const response = await this.createCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 新しい売上データを作成します
     * 売上データ作成
     */
    async createSaleRaw(requestParameters: CreateSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sale>> {
        if (requestParameters['createSaleRequest'] == null) {
            throw new runtime.RequiredError(
                'createSaleRequest',
                'Required parameter "createSaleRequest" was null or undefined when calling createSale().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/sales`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createSaleRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 新しい売上データを作成します
     * 売上データ作成
     */
    async createSale(requestParameters: CreateSaleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sale> {
        const response = await this.createSaleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 顧客データの一覧を取得します
     * 顧客一覧取得
     */
    async getCustomersRaw(requestParameters: GetCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomers200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/customers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 顧客データの一覧を取得します
     * 顧客一覧取得
     */
    async getCustomers(requestParameters: GetCustomersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomers200Response> {
        const response = await this.getCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ダッシュボードに表示する総売上、売上件数、顧客数などの統計情報を取得します
     * ダッシュボード統計データ取得
     */
    async getDashboardStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/dashboard/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * ダッシュボードに表示する総売上、売上件数、顧客数などの統計情報を取得します
     * ダッシュボード統計データ取得
     */
    async getDashboardStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardStats> {
        const response = await this.getDashboardStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 最近の売上データ一覧を取得します
     * 最近の売上一覧取得
     */
    async getRecentSalesRaw(requestParameters: GetRecentSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRecentSales200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/dashboard/recent-sales`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 最近の売上データ一覧を取得します
     * 最近の売上一覧取得
     */
    async getRecentSales(requestParameters: GetRecentSalesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRecentSales200Response> {
        const response = await this.getRecentSalesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 売上データの一覧を取得します
     * 売上一覧取得
     */
    async getSalesRaw(requestParameters: GetSalesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSales200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/sales`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 売上データの一覧を取得します
     * 売上一覧取得
     */
    async getSales(requestParameters: GetSalesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSales200Response> {
        const response = await this.getSalesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 月別の売上推移データを取得します
     * 売上チャートデータ取得
     */
    async getSalesChartRaw(requestParameters: GetSalesChartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSalesChart200Response>> {
        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/dashboard/sales-chart`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 月別の売上推移データを取得します
     * 売上チャートデータ取得
     */
    async getSalesChart(requestParameters: GetSalesChartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSalesChart200Response> {
        const response = await this.getSalesChartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetSalesSortByEnum = {
    CreatedAt: 'createdAt',
    Amount: 'amount',
    Customer: 'customer'
} as const;
export type GetSalesSortByEnum = typeof GetSalesSortByEnum[keyof typeof GetSalesSortByEnum];
/**
 * @export
 */
export const GetSalesSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetSalesSortOrderEnum = typeof GetSalesSortOrderEnum[keyof typeof GetSalesSortOrderEnum];
/**
 * @export
 */
export const GetSalesChartPeriodEnum = {
    Months: 'months',
    Weeks: 'weeks',
    Days: 'days'
} as const;
export type GetSalesChartPeriodEnum = typeof GetSalesChartPeriodEnum[keyof typeof GetSalesChartPeriodEnum];
